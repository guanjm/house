分派的概念
	变量被声明时的类型叫做变量的静态类型(Static Type)或明显类型(Apparent Type)，而变量所引用的对象的真实类型又叫做变量的实际类型(Actual Type)。
	List list = new ArrayList();
	list:变量		List:静态类型/明显类型	ArrayList:实际类型
	
根据对象的类型而对方法进行的选择，就是分派(Dispatch)：
　　静态分派(Static Dispatch)发生在编译时期，分派根据静态类型信息发生。静态分派对于我们来说并不陌生，方法重载就是静态分派。
　　动态分派(Dynamic Dispatch)发生在运行时期，动态分派动态地置换掉某个方法。

静态分派：通过方法重装
	demo：StaticDispatch.java
	三个eat()方法重装而成，而Fruit和Meat继承与Food，最终的输出结果都是两行相同的"eat food"。
	两次对eat()方法传入的是不同的参数：eat（fruit）和eat（meat），他们虽然有不同的实际类型Fruit和Meat，但他们的静态类型是一样的Food。
	重装方法的分派是根据静态类型进行的，这个分派过程在编译时期就完成了。
	
动态分派：通过方法重写
	demo：DynamicDispatch.java
	静态类型是Food，实际类型分别为Fruit和Meat，如果调用的实际类型为Food，那么输出结果为eat food。
	问题核心是：Java编译器在编译时期并不知道哪些代码会被执行，因为编译器仅仅知道对象的静态类型，而不知道对象的实际类型，而方法的调用则是根据对象的实际类型，而不是静态类型。
	
分派的类型：
	一个方法所属的对象叫做方法的接受者，方法的接受者与方法的参数统称为方法的宗量。
	class Test{
		public void print(String str){
			System.out.println(str);
		}
	}
	print()方法属于Test对象，即Test为print（）方法的接受者。即Test对象和str为print()方法的宗量。
	
根据分派可以基于多少种宗量，可以将面对的语言划分为单分派语言（Uni-Dispatch）和多分派语言（Multi-Dispatch）。
单分派语言根据一个宗量的类型进行方法的选择，多分派语言根据多于一个宗量的类型对方法进行选择。
C++和Java均是单分派语言，多分派语言的例子包括CLOS和Cecil。
Java就是动态的单分派语言，因为这种语言的动态分派仅仅会考虑到方法的接收者的类型，
    同时又是静态的多分派语言，因为这种语言对重载方法的分派会考虑到方法的接收者的类型以及方法的所有参数的类型。
     
	单分派语言中，两个条件决定真实调用的方法：1、方法的名字；2、接受者的真实类型。
	单分派限制了方法的选择过程，使得只有一个宗量可以被考虑到，这个宗量通常就是方法的接受者。
	在Java中，如果一个方法是作用于某个类型不明的对象上面，那么对这个对象的真实类型测试仅会发生一次，这就是动态的单分派的特征。
 
 双重分派
 	一个方法根据两个宗量的类型来决定不同的代码，这就是双重分派。
 	Java语言不支持动态的多分派，也意味着Java不支持动态的双重分派。但是通过使用设计模式，也可以在Java里实现动态的多重分派。
 	在Java中可以通过两次方法调用来达到两次分派目的。
 	demo：DoubleDynamic.java
 	1、方法的接受者，在真实类型East1或East2时发生了一次动态单分派。
 	2、方法的参数，在真实类型Weat1或Weat2传入时再发生了一次动态分派。
 	